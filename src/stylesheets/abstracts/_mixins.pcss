
@import "variables";

@define-mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
    @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}



@define-mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}


@define-mixin break-point($args...) {
    @if length($args) == 1 {
        @media only screen and (min-width: nth($args, 1)) {
            @content;
        }
    }
    @else if length($args) == 2 {
        @media only screen and (min-width: nth($args,1)) and (max-width:nth($args,2)) {
            @content;
        }
    }
}


@define-mixin retina-detect {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),only screen and (min--moz-device-pixel-ratio: 2),only screen and (-o-min-device-pixel-ratio: 2/1),only screen and ( min-device-pixel-ratio: 2),only screen and (min-resolution: 192dpi),only screen and (min-resolution: 2dppx) {
        @content;
    }
}

@define-mixin reset-box-model($args...) {
    @for $item from 1 through length($args) {
        #{nth($args,$item)} {
            padding: 0;
            margin: 0;
            border-width: 0;
        }
    }
}

@define-mixin reset-anchor-tag() {
    a {
        @include on-event() {
            text-decoration: none;
        }
    }
}

@define-mixin make-custom-grid($columns) {
    width: percentage($columns/$grid-columns);
    float: left;
    position: relative;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
}

@define-mixin make-right-offset($columns) {
    margin-right: percentage($columns/$grid-columns);
}


@define-mixin headerStyles {
    font-family: $lato;
    font-weight: 700;
    font-size: (30em/$remSize);
    color: $darkGrey;
}

@define-mixin transition($transition...) {
    -webkit-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@define-mixin list-unstyled {
    padding-left: 0;
    list-style: none;
}

@define-mixin img-responsive($display: block) {
    display: $display;
    max-width: 100%; 
    height: auto; 

@define-mixin clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }

    &:after {
        clear: both;
    }
}

@define-mixin textStyles {
    font-family: $lato;
    font-weight: 400;
    font-size: 1em;
    color: $darkGrey;
}

@define-mixin placeholderColor($color: white, $font: "gothamBook") {
    &::-webkit-input-placeholder {
        color: $color;
        font-family: $font;
    }

    &:-moz-placeholder { 
        color: $color;
        font-family: $font;
    }

    &::-moz-placeholder { 
        color: $color;
        font-family: $font;
    }

    &:-ms-input-placeholder {
        color: $color;
        font-family: $font;
    }
}

@define-mixin centerVerticaly() {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@define-mixin imgResponsive() {
    display: block;
    max-width: 100%;
    height: auto;
    max-width: 100%;

    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
        width: 100%;
    }
}

@define-mixin circle($size, $border: 1px solid white,$backgroundColor: white) {
    display: block;
    width: $size;
    height: $size;
    border-radius: 50%;
    border: $border;
    background-color: $backgroundColor;
}

@define-mixin triangle($direction, $color: white, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    }
    @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}

@define-mixin recapture() {
    margin: 9px auto 0;
    transform: scale(0.77);
    transform-origin: 0 0;
}

@define-mixin clearfix() {
    &:before,
    &:after {
        content: " "; 
        display: table; 
    }

    &:after {
        clear: both;
    }
}

@define-mixin latoRegular {
    font-family: $lato;
    font-weight: 400;
}